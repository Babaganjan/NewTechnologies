@use 'sass:math';
@use 'sass:list';
@use 'functions' as *;

@mixin typography(
  $color: var(--text-white),
  $weight: 500,
  $size: 1.125rem,
  $line: 120%,
  $transform: uppercase,
  $spacing: -0.06em
) {
  font-weight: $weight;
  font-size: $size;
  line-height: $line;
  letter-spacing: $spacing;
  text-transform: $transform;
  color: $color;
}

@mixin decoration(
  $color: var(--text-white),
  $size: 0.75rem,
  $image: '/img/kvadrat.svg',
  $pos: (
    right: -1px,
    top: -1px,
  )
) {
  position: absolute;
  width: $size;
  height: $size;
  background-color: $color;
  mask-image: url(#{$image});
  mask-position: center;
  mask-size: contain;
  mask-repeat: no-repeat;
  pointer-events: none;
  @each $k, $v in $pos {
    #{$k}: $v;
  }
}

@mixin respond-min($breakpoint, $type: min) {
  @if $type == min {
    @media (min-width: $breakpoint) {
      @content;
    }
  } @else if $type == max {
    @media (max-width: ($breakpoint - 1px)) {
      @content;
    }
  } @else if $type == between {
    @media (min-width: nth($breakpoint, 1)) and (max-width: nth($breakpoint, 2)) {
      @content;
    }
  }
}
// bottom: -32px; border-bottom: 33px; width: 1026px; border-left/border-right: 63px;
@mixin trapezoid-decor(
  $width: 21px,
  $height: 13px,
  $color: #000,
  $position: both,
  $size: 198px,
  $shift: -11px
) {
  position: relative;

  @if $position == top or $position == both {
    &::before {
      content: '';
      position: absolute;
      left: 50%;
      transform: translateX(-50%) rotate(180deg);
      width: $size;
      border-left: $width solid transparent;
      border-right: $width solid transparent;
      top: $shift;
      border-top: $height solid $color;
    }
  }

  @if $position == bottom or $position == both {
    &::after {
      content: '';
      position: absolute;
      left: 50%;
      transform: translateX(-50%) rotate(180deg);
      width: $size;
      border-left: $width solid transparent;
      border-right: $width solid transparent;
      bottom: $shift;
      border-bottom: $height solid $color;
    }
  }
}

@mixin bracket-decor(
  $color: #fff,
  $pos: (
    top: -2px,
    left: -10px,
  )
) {
  @include typography($color, 700, fluid(14px, 22px), 1.2);
  padding-inline: fluid(10px, 22px);
  &::after {
    content: '[';
    position: absolute;
    @each $k, $v in $pos {
      #{$k}: $v;
    }
  }
}

@mixin line-decor($positions: 38.7% 50% 61.3%, $color: #212121, $thickness: 1px, $angle: 90deg) {
  position: relative;
  &::before {
    content: '';
    position: absolute;
    inset: 0;
    z-index: -1;
    pointer-events: none;
    background-repeat: no-repeat;

    $gradients: ();
    @each $pos in $positions {
      $half: calc($thickness / 2);
      $gradient: linear-gradient(
        $angle,
        transparent calc(#{$pos} - #{$half}),
        $color calc(#{$pos} - #{$half}),
        $color calc(#{$pos} + #{$half}),
        transparent calc(#{$pos} + #{$half})
      );
      $gradients: list.append($gradients, $gradient, comma);
    }
    background-image: $gradients;
  }
}

@mixin item-decor(
  $color: var(--text-black),
  $before-position: (
    top: 3px,
    left: 3px,
  ),
  $after-position: (
    bottom: 3px,
    right: 3px,
  ),
  $size: (
    width: 12px,
    height: 12px,
  )
) {
  position: relative;

  &::before,
  &::after {
    content: '';
    position: absolute;
    @each $b, $c in $size {
      #{$b}: $c;
    }
    background-color: $color;
    mask-image: url(/img/decoration.svg);
    mask-position: center;
    mask-size: contain;
    mask-repeat: no-repeat;
    z-index: 3;
  }

  &::before {
    @each $k, $v in $before-position {
      #{$k}: $v;
    }
  }

  &::after {
    @each $k, $v in $after-position {
      #{$k}: $v;
    }
    transform: rotate(180deg);
  }
}
